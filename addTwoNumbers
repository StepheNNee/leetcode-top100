解法一：将两个链表补充到同一长度（两者最大的长度）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int len1 = 1, len2 = 1;
        ListNode *p1 = l1;
        ListNode *p2 = l2;
        ListNode *head = nullptr, *tail = nullptr;
        int count = 0;
        int sum = 0;
        //求取链表的长度
        //while(p1 != nullptr)//由于while循环里有p1->next,判断条件必须是p1->next != nullptr;
        while(p1->next != nullptr)
        {
            len1++;
            p1 = p1->next;
        }
        while(p2->next != nullptr)
        {
            len2++;
            p2 = p2->next;
        }
        //补零对齐
        if(len1 > len2)
        {
            for(int i = 0; i < len1 - len2; i++)
            {
                p2->next = new ListNode(0);
                p2 = p2->next;
            }
        }
        else
            {
                for(int i = 0; i < len2 - len1; i++)
                {
                    p1->next = new ListNode(0);
                    p1 = p1->next;
                }
        }
        p1 = l1;
        p2 = l2;
        while(p1 != nullptr)
        {
            sum = p1->val + p2->val + count;
            count = sum / 10;
            sum %= 10;
            p1 = p1->next;
            p2 = p2->next;
            if(!head)
                head = tail = new ListNode(sum); 
            else{
                tail->next = new ListNode(sum);//先给tail->next赋值
                tail = tail->next;//再移动tail指针
                //tail = tail->next;//先移动tail指针
                //tail = new ListNode(sum);//再给tail赋值
            }
        }
        if(count)
            tail->next = new ListNode(count);
            //tail = tail->next;
            //tail = new ListNode(count);
        return head;

    }
};
解法二：不对齐补零，如果链表不为空则相加，为空则不加
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int len1 = 0, len2 = 0;
        ListNode *p1 = l1;
        ListNode *p2 = l2;
        ListNode *head = nullptr, *tail = nullptr;
        int count = 0;
        int sum = 0;
        while(p1 != nullptr || p2 != nullptr)
        {
            sum = 0;
            //判断不为空则相加，为空则不加
            if(p1 != nullptr)
            {
                sum += p1->val;
                p1 = p1->next;
            }
            if(p2 != nullptr)
            {
                sum += p2->val;
                p2 = p2->next;
            }
            sum += count;
            count = sum / 10;
            sum %= 10;
            if(!head)
                head = tail = new ListNode(sum); 
            else{
                tail->next = new ListNode(sum);
                tail = tail->next;
            }
        }
        if(count)
            tail->next = new ListNode(count);
        return head;

    }
};
